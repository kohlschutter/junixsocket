## junixsocket-native compiler configuration
## see this project's pom for custom properties that can be reused here

# NOTE: nar-maven-plugin hardcodes "gcc", even if you specify "clang" here (GccLinker#getLinker(LinkType))
x86_64.MacOSX.clang.linker.name=clang
x86_64.MacOSX.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target} -undefined dynamic_lookup
x86_64.MacOSX.clang.c.compiler=clang
x86_64.MacOSX.clang.c.defines=
x86_64.MacOSX.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.c.includes=${junixsocket.native.default.c.includes}
x86_64.MacOSX.clang.c.excludes=
x86_64.MacOSX.clang.java.include=
x86_64.MacOSX.clang.java.runtimeDirectory=IGNORED
x86_64.MacOSX.clang.lib.prefix=lib
x86_64.MacOSX.clang.shared.prefix=lib
x86_64.MacOSX.clang.static.extension=a
x86_64.MacOSX.clang.shared.extension=dylib
x86_64.MacOSX.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
x86_64.MacOSX.clang.jni.extension=jnilib
x86_64.MacOSX.clang.executable.extension=
x86_64.MacOSX.clang.cpp.compiler=clang++
x86_64.MacOSX.clang.cpp.defines=
x86_64.MacOSX.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
x86_64.MacOSX.clang.cpp.excludes=

aarch64.MacOSX.linker=clang

aarch64.MacOSX.clang.linker.name=clang
aarch64.MacOSX.clang.linker.options=${junixsocket.native.default.linker.options} -target arm64-apple-macos11 -undefined dynamic_lookup
aarch64.MacOSX.clang.c.compiler=clang
aarch64.MacOSX.clang.c.defines=
aarch64.MacOSX.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target arm64-apple-macos11
aarch64.MacOSX.clang.c.includes=${junixsocket.native.default.c.includes}
aarch64.MacOSX.clang.c.excludes=
aarch64.MacOSX.clang.java.include=
aarch64.MacOSX.clang.java.runtimeDirectory=IGNORED
aarch64.MacOSX.clang.lib.prefix=lib
aarch64.MacOSX.clang.shared.prefix=lib
aarch64.MacOSX.clang.static.extension=a
aarch64.MacOSX.clang.shared.extension=dylib
aarch64.MacOSX.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
aarch64.MacOSX.clang.jni.extension=jnilib
aarch64.MacOSX.clang.executable.extension=
aarch64.MacOSX.clang.cpp.compiler=clang++
aarch64.MacOSX.clang.cpp.defines=
aarch64.MacOSX.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target arm64-apple-macos11
aarch64.MacOSX.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
aarch64.MacOSX.clang.cpp.excludes=

amd64.Linux.clang.linker.name=clang
amd64.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.compiler=clang
amd64.Linux.clang.c.defines=_GNU_SOURCE
amd64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.Linux.clang.c.excludes=
amd64.Linux.clang.java.include=
amd64.Linux.clang.java.runtimeDirectory=IGNORED
amd64.Linux.clang.lib.prefix=lib
amd64.Linux.clang.shared.prefix=lib
amd64.Linux.clang.static.extension=a
amd64.Linux.clang.shared.extension=so
amd64.Linux.clang.plugin.extension=so
amd64.Linux.clang.jni.extension=so
amd64.Linux.clang.executable.extension=
amd64.Linux.clang.cpp.compiler=clang++
amd64.Linux.clang.cpp.defines=_GNU_SOURCE
amd64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.Linux.clang.cpp.excludes=

arm.Linux.clang.linker.name=clang
arm.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
arm.Linux.clang.c.compiler=clang
arm.Linux.clang.c.defines=_GNU_SOURCE
arm.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
arm.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
arm.Linux.clang.c.excludes=
arm.Linux.clang.java.include=
arm.Linux.clang.java.runtimeDirectory=IGNORED
arm.Linux.clang.lib.prefix=lib
arm.Linux.clang.shared.prefix=lib
arm.Linux.clang.static.extension=a
arm.Linux.clang.shared.extension=so
arm.Linux.clang.plugin.extension=so
arm.Linux.clang.jni.extension=so
arm.Linux.clang.executable.extension=
arm.Linux.clang.cpp.compiler=clang++
arm.Linux.clang.cpp.defines=_GNU_SOURCE
arm.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
arm.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
arm.Linux.clang.cpp.excludes=

aarch64.Linux.clang.linker.name=clang
aarch64.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.c.compiler=clang
aarch64.Linux.clang.c.defines=_GNU_SOURCE
aarch64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
aarch64.Linux.clang.c.excludes=
aarch64.Linux.clang.java.include=
aarch64.Linux.clang.java.runtimeDirectory=IGNORED
aarch64.Linux.clang.lib.prefix=lib
aarch64.Linux.clang.shared.prefix=lib
aarch64.Linux.clang.static.extension=a
aarch64.Linux.clang.shared.extension=so
aarch64.Linux.clang.plugin.extension=so
aarch64.Linux.clang.jni.extension=so
aarch64.Linux.clang.executable.extension=
aarch64.Linux.clang.cpp.compiler=clang++
aarch64.Linux.clang.cpp.defines=_GNU_SOURCE
aarch64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
aarch64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
aarch64.Linux.clang.cpp.excludes=

aarch64.Android.clang.linker.name=clang
aarch64.Android.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target}
aarch64.Android.clang.c.compiler=clang
aarch64.Android.clang.c.defines=_GNU_SOURCE
aarch64.Android.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
aarch64.Android.clang.c.includes=${junixsocket.native.default.c.includes}
aarch64.Android.clang.c.excludes=
aarch64.Android.clang.java.include=
aarch64.Android.clang.java.runtimeDirectory=IGNORED
aarch64.Android.clang.lib.prefix=lib
aarch64.Android.clang.shared.prefix=lib
aarch64.Android.clang.static.extension=a
aarch64.Android.clang.shared.extension=so
aarch64.Android.clang.plugin.extension=so
aarch64.Android.clang.jni.extension=so
aarch64.Android.clang.executable.extension=
aarch64.Android.clang.cpp.compiler=clang++
aarch64.Android.clang.cpp.defines=_GNU_SOURCE
aarch64.Android.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
aarch64.Android.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
aarch64.Android.clang.cpp.excludes=

i686.Android.clang.linker.name=clang
i686.Android.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target}
i686.Android.clang.c.compiler=clang
i686.Android.clang.c.defines=_GNU_SOURCE
i686.Android.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
i686.Android.clang.c.includes=${junixsocket.native.default.c.includes}
i686.Android.clang.c.excludes=
i686.Android.clang.java.include=
i686.Android.clang.java.runtimeDirectory=IGNORED
i686.Android.clang.lib.prefix=lib
i686.Android.clang.shared.prefix=lib
i686.Android.clang.static.extension=a
i686.Android.clang.shared.extension=so
i686.Android.clang.plugin.extension=so
i686.Android.clang.jni.extension=so
i686.Android.clang.executable.extension=
i686.Android.clang.cpp.compiler=clang++
i686.Android.clang.cpp.defines=_GNU_SOURCE
i686.Android.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
i686.Android.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
i686.Android.clang.cpp.excludes=

x86_64.Android.clang.linker.name=clang
x86_64.Android.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target}
x86_64.Android.clang.c.compiler=clang
x86_64.Android.clang.c.defines=_GNU_SOURCE
x86_64.Android.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
x86_64.Android.clang.c.includes=${junixsocket.native.default.c.includes}
x86_64.Android.clang.c.excludes=
x86_64.Android.clang.java.include=
x86_64.Android.clang.java.runtimeDirectory=IGNORED
x86_64.Android.clang.lib.prefix=lib
x86_64.Android.clang.shared.prefix=lib
x86_64.Android.clang.static.extension=a
x86_64.Android.clang.shared.extension=so
x86_64.Android.clang.plugin.extension=so
x86_64.Android.clang.jni.extension=so
x86_64.Android.clang.executable.extension=
x86_64.Android.clang.cpp.compiler=clang++
x86_64.Android.clang.cpp.defines=_GNU_SOURCE
x86_64.Android.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
x86_64.Android.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
x86_64.Android.clang.cpp.excludes=

arm.Android.clang.linker.name=clang
arm.Android.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target}
arm.Android.clang.c.compiler=clang
arm.Android.clang.c.defines=_GNU_SOURCE
arm.Android.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
arm.Android.clang.c.includes=${junixsocket.native.default.c.includes}
arm.Android.clang.c.excludes=
arm.Android.clang.java.include=
arm.Android.clang.java.runtimeDirectory=IGNORED
arm.Android.clang.lib.prefix=lib
arm.Android.clang.shared.prefix=lib
arm.Android.clang.static.extension=a
arm.Android.clang.shared.extension=so
arm.Android.clang.plugin.extension=so
arm.Android.clang.jni.extension=so
arm.Android.clang.executable.extension=
arm.Android.clang.cpp.compiler=clang++
arm.Android.clang.cpp.defines=_GNU_SOURCE
arm.Android.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
arm.Android.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
arm.Android.clang.cpp.excludes=

ppc64.AIX.clang.linker.name=clang
ppc64.AIX.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target} -maix64 -Xcrossclang-use-gcc=powerpc-ibm-aix7.2-gcc -static-libgcc -s
ppc64.AIX.clang.c.compiler=clang
ppc64.AIX.clang.c.defines=_GNU_SOURCE
ppc64.AIX.clang.c.options=${junixsocket.native.clang.c.options} -maix64 -Xcrossclang-use-gcc=powerpc-ibm-aix7.2-gcc -Xcrossclang-hide-unknown-warning-warnings -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target} -D_THREAD_SAFE_ERRNO -D_BSD=44
ppc64.AIX.clang.c.includes=${junixsocket.native.default.c.includes}
ppc64.AIX.clang.c.excludes=
ppc64.AIX.clang.java.include=
ppc64.AIX.clang.java.runtimeDirectory=IGNORED
ppc64.AIX.clang.lib.prefix=lib
ppc64.AIX.clang.shared.prefix=lib
ppc64.AIX.clang.static.extension=a
ppc64.AIX.clang.shared.extension=a
ppc64.AIX.clang.plugin.extension=a
ppc64.AIX.clang.jni.extension=a
ppc64.AIX.clang.executable.extension=
ppc64.AIX.clang.cpp.compiler=clang++
ppc64.AIX.clang.cpp.defines=_GNU_SOURCE
ppc64.AIX.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
ppc64.AIX.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
ppc64.AIX.clang.cpp.excludes=

ppc64.OS400.clang.linker.name=clang
ppc64.OS400.clang.linker.options=${junixsocket.native.default.linker.options} -target powerpc-ibm-aix7.2.0.0 -maix64 -Xcrossclang-use-gcc=powerpc-ibm-aix7.2-gcc -static-libgcc -s
ppc64.OS400.clang.c.compiler=clang
ppc64.OS400.clang.c.defines=_GNU_SOURCE
ppc64.OS400.clang.c.options=${junixsocket.native.clang.c.options} -maix64 -Xcrossclang-use-gcc=powerpc-ibm-aix7.2-gcc -Xcrossclang-hide-unknown-warning-warnings -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target} -D_THREAD_SAFE_ERRNO -D_BSD=44 -D_OS400
ppc64.OS400.clang.c.includes=${junixsocket.native.default.c.includes}
ppc64.OS400.clang.c.excludes=
ppc64.OS400.clang.java.include=
ppc64.OS400.clang.java.runtimeDirectory=IGNORED
ppc64.OS400.clang.lib.prefix=
ppc64.OS400.clang.shared.prefix=
ppc64.OS400.clang.static.extension=srvpgm
ppc64.OS400.clang.shared.extension=srvpgm
ppc64.OS400.clang.plugin.extension=srvpgm
ppc64.OS400.clang.jni.extension=srvpgm
ppc64.OS400.clang.executable.extension=
ppc64.OS400.clang.cpp.compiler=clang++
ppc64.OS400.clang.cpp.defines=_GNU_SOURCE
ppc64.OS400.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
ppc64.OS400.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
ppc64.OS400.clang.cpp.excludes=

ppc64le.Linux.clang.linker.name=clang
ppc64le.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.c.compiler=clang
ppc64le.Linux.clang.c.defines=_GNU_SOURCE
ppc64le.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
ppc64le.Linux.clang.c.excludes=
ppc64le.Linux.clang.java.include=
ppc64le.Linux.clang.java.runtimeDirectory=IGNORED
ppc64le.Linux.clang.lib.prefix=lib
ppc64le.Linux.clang.shared.prefix=lib
ppc64le.Linux.clang.static.extension=a
ppc64le.Linux.clang.shared.extension=so
ppc64le.Linux.clang.plugin.extension=so
ppc64le.Linux.clang.jni.extension=so
ppc64le.Linux.clang.executable.extension=
ppc64le.Linux.clang.cpp.compiler=clang++
ppc64le.Linux.clang.cpp.defines=_GNU_SOURCE
ppc64le.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
ppc64le.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
ppc64le.Linux.clang.cpp.excludes=

s390x.Linux.clang.linker.name=clang
s390x.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.c.compiler=clang
s390x.Linux.clang.c.defines=_GNU_SOURCE
s390x.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
s390x.Linux.clang.c.excludes=
s390x.Linux.clang.java.include=
s390x.Linux.clang.java.runtimeDirectory=IGNORED
s390x.Linux.clang.lib.prefix=lib
s390x.Linux.clang.shared.prefix=lib
s390x.Linux.clang.static.extension=a
s390x.Linux.clang.shared.extension=so
s390x.Linux.clang.plugin.extension=so
s390x.Linux.clang.jni.extension=so
s390x.Linux.clang.executable.extension=
s390x.Linux.clang.cpp.compiler=clang++
s390x.Linux.clang.cpp.defines=_GNU_SOURCE
s390x.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
s390x.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
s390x.Linux.clang.cpp.excludes=

loongarch64.Linux.clang.linker.name=clang
loongarch64.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
loongarch64.Linux.clang.c.compiler=clang
loongarch64.Linux.clang.c.defines=_GNU_SOURCE
loongarch64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
loongarch64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
loongarch64.Linux.clang.c.excludes=
loongarch64.Linux.clang.java.include=
loongarch64.Linux.clang.java.runtimeDirectory=IGNORED
loongarch64.Linux.clang.lib.prefix=lib
loongarch64.Linux.clang.shared.prefix=lib
loongarch64.Linux.clang.static.extension=a
loongarch64.Linux.clang.shared.extension=so
loongarch64.Linux.clang.plugin.extension=so
loongarch64.Linux.clang.jni.extension=so
loongarch64.Linux.clang.executable.extension=
loongarch64.Linux.clang.cpp.compiler=clang++
loongarch64.Linux.clang.cpp.defines=_GNU_SOURCE
loongarch64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
loongarch64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
loongarch64.Linux.clang.cpp.excludes=

riscv64.Linux.clang.linker.name=clang
riscv64.Linux.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target} -Xcrossclang-llvm-name llvm
riscv64.Linux.clang.c.compiler=clang
riscv64.Linux.clang.c.defines=_GNU_SOURCE
riscv64.Linux.clang.c.options=-march=rv64imafd -mabi=lp64d ${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
riscv64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
riscv64.Linux.clang.c.excludes=
riscv64.Linux.clang.java.include=
riscv64.Linux.clang.java.runtimeDirectory=IGNORED
riscv64.Linux.clang.lib.prefix=lib
riscv64.Linux.clang.shared.prefix=lib
riscv64.Linux.clang.static.extension=a
riscv64.Linux.clang.shared.extension=so
riscv64.Linux.clang.plugin.extension=so
riscv64.Linux.clang.jni.extension=so
riscv64.Linux.clang.executable.extension=
riscv64.Linux.clang.cpp.compiler=clang++
riscv64.Linux.clang.cpp.defines=_GNU_SOURCE
riscv64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
riscv64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
riscv64.Linux.clang.cpp.excludes=

amd64.Windows10.clang.linker.name=clang
amd64.Windows10.clang.linker.options=${junixsocket.native.default.linker.options} -target x86_64-w64-mingw32 -Xcrossclang-use-gcc=x86_64-w64-mingw32-gcc -lws2_32 -ladvapi32 -lmswsock -Xcrossclang-output-strip-lib-prefix
#amd64.Windows10.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target} -Xcrossclang-use-ldshim -Wl,--Xldshim-ld=x86_64-w64-mingw32-ld
amd64.Windows10.clang.c.compiler=clang
amd64.Windows10.clang.c.defines=
amd64.Windows10.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target x86_64-w64-mingw32 -Xcrossclang-use-gcc=x86_64-w64-mingw32-gcc -Xcrossclang-hide-unknown-warning-warnings
amd64.Windows10.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.Windows10.clang.c.excludes=
amd64.Windows10.clang.java.include=
amd64.Windows10.clang.java.runtimeDirectory=IGNORED
amd64.Windows10.clang.lib.prefix=lib
amd64.Windows10.clang.shared.prefix=lib
amd64.Windows10.clang.static.extension=a
amd64.Windows10.clang.shared.extension=dll
amd64.Windows10.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
amd64.Windows10.clang.jni.extension=dll
amd64.Windows10.clang.executable.extension=
amd64.Windows10.clang.cpp.compiler=clang++
amd64.Windows10.clang.cpp.defines=
amd64.Windows10.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.Windows10.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.Windows10.clang.cpp.excludes=

aarch64.Windows10.clang.linker.name=clang
aarch64.Windows10.clang.linker.options=${junixsocket.native.default.linker.options} -target unspecified -Xcrossclang-use-gcc=aarch64-w64-mingw32-gcc -lws2_32 -ladvapi32 -lmswsock -Xcrossclang-output-strip-lib-prefix -Xcrossclang-ignore-export-dynamic
aarch64.Windows10.clang.c.compiler=clang
aarch64.Windows10.clang.c.defines=
aarch64.Windows10.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target unspecified -Xcrossclang-use-gcc=aarch64-w64-mingw32-gcc -Xcrossclang-hide-unknown-warning-warnings
aarch64.Windows10.clang.c.includes=${junixsocket.native.default.c.includes}
aarch64.Windows10.clang.c.excludes=
aarch64.Windows10.clang.java.include=
aarch64.Windows10.clang.java.runtimeDirectory=IGNORED
aarch64.Windows10.clang.lib.prefix=lib
aarch64.Windows10.clang.shared.prefix=lib
aarch64.Windows10.clang.static.extension=a
aarch64.Windows10.clang.shared.extension=dll
aarch64.Windows10.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
aarch64.Windows10.clang.jni.extension=dll
aarch64.Windows10.clang.executable.extension=
aarch64.Windows10.clang.cpp.compiler=clang++
aarch64.Windows10.clang.cpp.defines=
aarch64.Windows10.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
aarch64.Windows10.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
aarch64.Windows10.clang.cpp.excludes=

sparcv9.SunOS.clang.linker.name=clang
sparcv9.SunOS.clang.linker.options=${junixsocket.native.default.linker.options} -m64 -nostdlib -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.clang.c.compiler=clang
sparcv9.SunOS.clang.c.defines=_GNU_SOURCE
sparcv9.SunOS.clang.c.options=${junixsocket.native.clang.c.options} -m64 -O2 -Wno-unused-function -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.clang.c.includes=${junixsocket.native.default.c.includes}
sparcv9.SunOS.clang.c.excludes=
sparcv9.SunOS.clang.java.include=
sparcv9.SunOS.clang.java.runtimeDirectory=IGNORED
sparcv9.SunOS.clang.lib.prefix=lib
sparcv9.SunOS.clang.shared.prefix=lib
sparcv9.SunOS.clang.static.extension=a
sparcv9.SunOS.clang.shared.extension=so
sparcv9.SunOS.clang.plugin.extension=so
sparcv9.SunOS.clang.jni.extension=so
sparcv9.SunOS.clang.executable.extension=
sparcv9.SunOS.clang.cpp.compiler=clang++
sparcv9.SunOS.clang.cpp.defines=_GNU_SOURCE
sparcv9.SunOS.clang.cpp.options=${junixsocket.native.clang.cpp.options} -m64 -O2 -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
sparcv9.SunOS.clang.cpp.excludes=

sparcv9.SunOS.gcc.linker.name=clang
sparcv9.SunOS.gcc.linker.options=${junixsocket.native.default.linker.options} -m64 -nostdlib -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.gcc.c.compiler=clang
sparcv9.SunOS.gcc.c.defines=
sparcv9.SunOS.gcc.c.options=${junixsocket.native.clang.c.options} -m64 -O2 -Wno-unused-function -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.gcc.c.includes=${junixsocket.native.default.c.includes}
sparcv9.SunOS.gcc.c.excludes=
sparcv9.SunOS.gcc.java.include=
sparcv9.SunOS.gcc.java.runtimeDirectory=IGNORED
sparcv9.SunOS.gcc.lib.prefix=lib
sparcv9.SunOS.gcc.shared.prefix=lib
sparcv9.SunOS.gcc.static.extension=a
sparcv9.SunOS.gcc.shared.extension=so
sparcv9.SunOS.gcc.plugin.extension=so
sparcv9.SunOS.gcc.jni.extension=so
sparcv9.SunOS.gcc.executable.extension=
sparcv9.SunOS.gcc.cpp.compiler=clang++
sparcv9.SunOS.gcc.cpp.defines=
sparcv9.SunOS.gcc.cpp.options=${junixsocket.native.clang.cpp.options} -m64 -O2 -target ${junixsocket.native.llvm.target}
sparcv9.SunOS.gcc.cpp.includes=${junixsocket.native.default.cpp.includes}
sparcv9.SunOS.gcc.cpp.excludes=

amd64.SunOS.gcc.linker.name=gcc
amd64.SunOS.gcc.linker.options=${junixsocket.native.default.linker.options} -m64 -nostdlib -target ${junixsocket.native.llvm.target}
amd64.SunOS.gcc.c.compiler=gcc
amd64.SunOS.gcc.c.defines=
amd64.SunOS.gcc.c.options=-m64 ${junixsocket.native.clang.c.options} -Wno-unused-function -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.SunOS.gcc.c.includes=${junixsocket.native.default.c.includes}
amd64.SunOS.gcc.c.excludes=
amd64.SunOS.gcc.java.include=
amd64.SunOS.gcc.java.runtimeDirectory=IGNORED
amd64.SunOS.gcc.lib.prefix=lib
amd64.SunOS.gcc.shared.prefix=lib
amd64.SunOS.gcc.static.extension=a
amd64.SunOS.gcc.shared.extension=so
amd64.SunOS.gcc.plugin.extension=so
amd64.SunOS.gcc.jni.extension=so
amd64.SunOS.gcc.executable.extension=
amd64.SunOS.gcc.cpp.compiler=g++
amd64.SunOS.gcc.cpp.defines=
amd64.SunOS.gcc.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.SunOS.gcc.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.SunOS.gcc.cpp.excludes=

amd64.SunOS.clang.linker.name=clang
amd64.SunOS.clang.linker.options=${junixsocket.native.default.linker.options} -m64 -nostdlib -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.c.compiler=clang
amd64.SunOS.clang.c.defines=
amd64.SunOS.clang.c.options=-m64 ${junixsocket.native.clang.c.options} -Wno-unused-function -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.SunOS.clang.c.excludes=
amd64.SunOS.clang.java.include=
amd64.SunOS.clang.java.runtimeDirectory=IGNORED
amd64.SunOS.clang.lib.prefix=lib
amd64.SunOS.clang.shared.prefix=lib
amd64.SunOS.clang.static.extension=a
amd64.SunOS.clang.shared.extension=so
amd64.SunOS.clang.plugin.extension=so
amd64.SunOS.clang.jni.extension=so
amd64.SunOS.clang.executable.extension=
amd64.SunOS.clang.cpp.compiler=clang++
amd64.SunOS.clang.cpp.defines=
amd64.SunOS.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.SunOS.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.SunOS.clang.cpp.excludes=

amd64.FreeBSD.clang.linker.name=clang
amd64.FreeBSD.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-with-and-without-lc -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.c.compiler=clang
amd64.FreeBSD.clang.c.defines=_GNU_SOURCE
amd64.FreeBSD.clang.c.options=${junixsocket.native.clang.c.options} -Xcrossclang-with-and-without-lc -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.FreeBSD.clang.c.excludes=
amd64.FreeBSD.clang.java.include=
amd64.FreeBSD.clang.java.runtimeDirectory=IGNORED
amd64.FreeBSD.clang.lib.prefix=lib
amd64.FreeBSD.clang.shared.prefix=lib
amd64.FreeBSD.clang.static.extension=a
amd64.FreeBSD.clang.shared.extension=so
amd64.FreeBSD.clang.plugin.extension=so
amd64.FreeBSD.clang.jni.extension=so
amd64.FreeBSD.clang.executable.extension=
amd64.FreeBSD.clang.cpp.compiler=clang++
amd64.FreeBSD.clang.cpp.defines=_GNU_SOURCE
amd64.FreeBSD.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.FreeBSD.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.FreeBSD.clang.cpp.excludes=

amd64.DragonFlyBSD.clang.linker.name=clang
amd64.DragonFlyBSD.clang.linker.options=${junixsocket.native.default.linker.options} -Xcrossclang-use-ldshim -Wl,--Xldshim-ld=ld.lld -nostdlib -target ${junixsocket.native.llvm.target}
amd64.DragonFlyBSD.clang.c.compiler=clang
amd64.DragonFlyBSD.clang.c.defines=
amd64.DragonFlyBSD.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target} -O2
amd64.DragonFlyBSD.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.DragonFlyBSD.clang.c.excludes=
amd64.DragonFlyBSD.clang.java.include=
amd64.DragonFlyBSD.clang.java.runtimeDirectory=IGNORED
amd64.DragonFlyBSD.clang.lib.prefix=lib
amd64.DragonFlyBSD.clang.shared.prefix=lib
amd64.DragonFlyBSD.clang.static.extension=a
amd64.DragonFlyBSD.clang.shared.extension=so
amd64.DragonFlyBSD.clang.plugin.extension=so
amd64.DragonFlyBSD.clang.jni.extension=so
amd64.DragonFlyBSD.clang.executable.extension=
amd64.DragonFlyBSD.clang.cpp.compiler=clang++
amd64.DragonFlyBSD.clang.cpp.defines=
amd64.DragonFlyBSD.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.DragonFlyBSD.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.DragonFlyBSD.clang.cpp.excludes=

amd64.NetBSD.linker=clang
amd64.NetBSD.clang.c.compiler=clang
amd64.NetBSD.clang.linker.name=clang
amd64.NetBSD.clang.linker.options=${junixsocket.native.default.linker.options} -Wl,--no-rosegment,--disable-new-dtags,-znognustack,-znoseparate-code,-znorelro -target ${junixsocket.native.llvm.target}
amd64.NetBSD.clang.c.defines=_GNU_SOURCE
amd64.NetBSD.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.NetBSD.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.NetBSD.clang.c.excludes=
amd64.NetBSD.clang.java.include=
amd64.NetBSD.clang.java.runtimeDirectory=IGNORED
amd64.NetBSD.clang.lib.prefix=lib
amd64.NetBSD.clang.shared.prefix=lib
amd64.NetBSD.clang.static.extension=a
amd64.NetBSD.clang.shared.extension=so
amd64.NetBSD.clang.plugin.extension=so
amd64.NetBSD.clang.jni.extension=so
amd64.NetBSD.clang.executable.extension=
amd64.NetBSD.clang.cpp.compiler=clang++
amd64.NetBSD.clang.cpp.defines=_GNU_SOURCE
amd64.NetBSD.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.NetBSD.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.NetBSD.clang.cpp.excludes=

amd64.OpenBSD.linker=clang
amd64.OpenBSD.clang.c.compiler=clang
amd64.OpenBSD.clang.linker.name=clang
amd64.OpenBSD.clang.linker.options=${junixsocket.native.default.linker.options} -target ${junixsocket.native.llvm.target}
amd64.OpenBSD.clang.c.defines=_GNU_SOURCE
amd64.OpenBSD.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.OpenBSD.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.OpenBSD.clang.c.excludes=
amd64.OpenBSD.clang.java.include=
amd64.OpenBSD.clang.java.runtimeDirectory=IGNORED
amd64.OpenBSD.clang.lib.prefix=lib
amd64.OpenBSD.clang.shared.prefix=lib
amd64.OpenBSD.clang.static.extension=a
amd64.OpenBSD.clang.shared.extension=so
amd64.OpenBSD.clang.plugin.extension=so
amd64.OpenBSD.clang.jni.extension=so
amd64.OpenBSD.clang.executable.extension=
amd64.OpenBSD.clang.cpp.compiler=clang++
amd64.OpenBSD.clang.cpp.defines=_GNU_SOURCE
amd64.OpenBSD.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.OpenBSD.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.OpenBSD.clang.cpp.excludes=
